server:
  port: 8081

app:
  security:
    enabled: false
  iot:
    key-value: "68635f70-65a1-4747-ac34-b6fb41392d70"
spring:
  config:
    activate:
      on-profile: local
  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            issuer-uri: http://localhost:18080/realms/crai-realm
#        registration:
#          keycloak:
#            provider: keycloak
#            client-name: crai-client
#            client-id: crai-client
#            client-secret: V9MIjL2L6kMHhg32T5AbE2vCNIS0cOcE
#            scope: openid,offline_access,profile
#            #            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            #            redirect_uri: "http://localhost:8081/user"
#            authorization-grant-type: authorization_code
#      resourceserver:
#        jwt:
#          issuer-uri: http://localhost:18080/realms/crai-realm
  #          audiences: https://my-resource-server.example.com
  datasource:
    url: jdbc:postgresql://localhost:5432/userDb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 60000
      maximum-pool-size: 10
      idle-timeout: 60000
      minimum-idle: 4
  jpa:
    hibernate:
      # Hibernate ddl auto (create, create-drop, validate, update)
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        user_sql_comments: true
        format_sql: true
        #        jdb:
        #          lob:
        #            non_contextual_creation: true
        dialect: org.hibernate.dialect.PostgreSQLDialect


logging:
  level:
    org.hibernate.type: trace
    org.apache.hc: debug
    org.springframework.web.filter.CommonsRequestLoggingFilter: debug
